const config = require('../settings');
const { cmd } = require('../lib/command');
const DY_SCRAP = require('@dark-yasiya/scrap');
const dy_scrap = new DY_SCRAP();

function replaceYouTubeID(url) {
    const regex = /(?:youtube\.com\/(?:.*v=|.*\/)|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/shorts\/)([a-zA-Z0-9_-]{11})/;
    const match = url.match(regex);
    return match ? match[1] : null;
}

cmd({
    pattern: "play3",
    alias: ["mp3", "ytmp3", "song"],
    react: "üéµ",
    desc: "Download Ytmp3",
    category: "download",
    use: ".song <Text or YT URL>",
    filename: __filename
}, async (conn, m, mek, { from, q, reply }) => {
    try {
        if (!q) return await reply("*‚ùå ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä Q·¥ú·¥á Ä è ·¥è Ä  è·¥è·¥ú ·¥õ·¥ú ô·¥á ·¥ú Ä ü...!*");

        let id = q.startsWith("https://") ? replaceYouTubeID(q) : null;

        if (!id) {
            const searchResults = await dy_scrap.ytsearch(q);
            if (!searchResults?.results?.length) return await reply("*‚ùå …¥·¥è  Ä·¥áÍú±·¥ú ü·¥õÍú± Íú∞·¥è·¥ú…¥·¥Ö...!*");
            id = searchResults.results[0].videoId;
        }

        const data = await dy_scrap.ytsearch(`https://youtube.com/watch?v=${id}`);
        if (!data?.results?.length) return await reply("*‚ùå Íú∞·¥Ä…™ ü·¥Ö ·¥õ·¥è Íú∞·¥á·¥õ·¥Ñ ú ·¥†…™·¥Ö·¥á·¥è...!*");

        const { url, title, image, timestamp, ago, views, author } = data.results[0];

        let info = ` *< | ùêê·¥ú·¥á·¥á…¥ ùêâ·¥úÍú±·¥ç è ùêå·¥Ö üßö‚Äç‚ôÄÔ∏è ùêí·¥è…¥…¢ ùêÉ·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä* \n\n` +
            `üéµ *ùöÉùô∏ùöÉùôªùô¥:* ${title || "Unknown"}\n\n` +
            `‚è≥ *ùô≥ùöÑùöÅùô∞ùöÉùô∏ùôæùôΩ:* ${timestamp || "Unknown"}\n\n` +
            `üëÄ *ùöÖùô∏ùô¥ùöÜùöÇ:* ${views || "Unknown"}\n\n` +
            `üåè *ùöÅùô¥ùôªùô¥ùô∞ùöÇùô¥ùô≥ ùô∞ùô∂ùôæ:* ${ago || "Unknown"}\n\n` +
            `üë§ *ùô∞ùöÑùöÉùô∑ùôæùöÅ:* ${author?.name || "Unknown"}\n\n` +
            `üñá *ùöÑùöÅùôª:* ${url || "Unknown"}\n\n\n` +
            `üîΩ *ùêëùêûùê©ùê•ùê≤ ùêñùê¢ùê≠ùê° ùêòùê®ùêÆùê´ ùêÇùê°ùê®ùê¢ùêúùêû ùêéùê´ ùêÇùê•ùê¢ùêúùê§ ùêÅùêÆùê≠ùê≠ùê®ùêß*\n\n` +
            `‚ù∂. *ùô∞ùöÑùô≥ùô∏ùôæ ùöÉùöàùôøùô¥* üéµ\n` +
            `‚ûã. *ùô≥ùôæùô≤ùöÑùôºùô¥ùôΩùöÉ ùöÉùöàùôøùô¥* üìÅ\n\n` +
            `${config.FOOTER}`;

        const sentMsg = await conn.sendMessage(from, { 
            image: { url: image }, 
            caption: info,
            buttons: [
                { buttonId: `song_audio_${id}`, buttonText: { displayText: "üéµ ùô∞ùöÑùô≥ùô∏ùôæ ùöÉùöàùôøùô¥" }, type: 1 },
                { buttonId: `song_doc_${id}`, buttonText: { displayText: "üìÅ ùô≥ùôæùô≤ùöÑùôºùô¥ùôΩùöÉ ùöÉùöàùôøùô¥" }, type: 1 }
            ],
            headerType: 4
        }, { quoted: mek });

        const messageID = sentMsg.key.id;
        await conn.sendMessage(from, { react: { text: 'üé∂', key: sentMsg.key } });

        // Handle reply method (1 / 2)
        conn.ev.on('messages.upsert', async (messageUpdate) => { 
            try {
                const mekInfo = messageUpdate?.messages[0];
                if (!mekInfo?.message) return;

                const messageType = mekInfo?.message?.conversation || mekInfo?.message?.extendedTextMessage?.text;
                const isReplyToSentMsg = mekInfo?.message?.extendedTextMessage?.contextInfo?.stanzaId === messageID;

                if (!isReplyToSentMsg) return;

                let userReply = messageType.trim();
                let response, type;
                
                if (userReply === "1") {
                    response = await dy_scrap.ytmp3(`https://youtube.com/watch?v=${id}`);
                    let downloadUrl = response?.result?.download?.url;
                    if (!downloadUrl) return await reply("‚ùå ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö!");
                    type = { audio: { url: downloadUrl }, mimetype: "audio/mpeg" };

                } else if (userReply === "2") {
                    response = await dy_scrap.ytmp3(`https://youtube.com/watch?v=${id}`);
                    let downloadUrl = response?.result?.download?.url;
                    if (!downloadUrl) return await reply("‚ùå ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö!");
                    type = { document: { url: downloadUrl }, fileName: `${title}.mp3`, mimetype: "audio/mpeg", caption: title };

                } else { 
                    return await reply("*‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥è…™·¥Ñ·¥á...! ·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ‚ù∂ ·¥è Ä ‚ù∑*");
                }

                await conn.sendMessage(from, type, { quoted: mek });
            } catch (error) {
                console.error(error);
                await reply(`‚ùå *·¥Ä…¥ ·¥á Ä Ä·¥è Ä:* ${error.message || "·¥ú…¥·¥ã…¥·¥è·¥°…¥ ·¥á Ä Ä·¥è Ä"}`);
            }
        });

        // Handle button clicks
        conn.ev.on('messages.upsert', async (buttonUpdate) => {
            try {
                const btn = buttonUpdate?.messages[0];
                const btnId = btn?.message?.buttonsResponseMessage?.selectedButtonId;
                if (!btnId) return;

                let response, type;

                if (btnId === `song_audio_${id}`) {
                    response = await dy_scrap.ytmp3(`https://youtube.com/watch?v=${id}`);
                    let downloadUrl = response?.result?.download?.url;
                    if (!downloadUrl) return await reply("‚ùå ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö!");
                    type = { audio: { url: downloadUrl }, mimetype: "audio/mpeg" };

                } else if (btnId === `song_doc_${id}`) {
                    response = await dy_scrap.ytmp3(`https://youtube.com/watch?v=${id}`);
                    let downloadUrl = response?.result?.download?.url;
                    if (!downloadUrl) return await reply("‚ùå ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö!");
                    type = { document: { url: downloadUrl }, fileName: `${title}.mp3`, mimetype: "audio/mpeg", caption: title };
                }

                if (type) await conn.sendMessage(from, type, { quoted: mek });

            } catch (err) {
                console.error(err);
            }
        });

    } catch (error) {
        console.error(error);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } });
        await reply(`‚ùå *·¥Ä…¥ ·¥á Ä Ä·¥è Ä:* ${error.message || "·¥ú…¥·¥ã…¥·¥è·¥°…¥ ·¥á Ä Ä·¥è Ä"}`);
    }
});
